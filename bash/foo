#! /bin/bash
# this is a bash script!




dir=1000
for id in *; do
  (( id >= dir ? dir = id +1 : 0 ))
done
mkdir -p $dir/lock


# # With the (( )) evaluation one even can set up while loops:
# (
# num=3
# while (( num < 12 )); do
#   echo "This is one loop $num"
#   ((num++))
# done
# )
# echo "This is num: $num"


# (
# dir=1

# for id in {1..10}; do
#   (( id >= dir ? dir = id + 1 : 0 ))
# done

# echo "This is dir: $dir"
# )

# echo "Now outside the {} : $dir"

# # in the following lines I have tried to use the (( )) mathematical
# # expression to construct a C-like for loop and manipulate the loop
# # integer i inside the loop. This could come in handy if you want to
# # run more loops than foreseen. But you have to take care of infinite
# # looping. There should also be a while loop construct
# num=1
# for (( i = 0; i < 10; i++ ))
# do
#   (( num < 10 ? ( num++ && i-- )  : 0 ))
#   echo $i $num
# done
